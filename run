#!/usr/bin/env bash
# vi:syntax=sh

APP_NAME="learn_to_code"

######################################## HELP

help(){
  if [ "$1" == "help" ]; then
    echo "Shows a short and helpful help text"
    exit 0
  fi
  echo "Builder Script for Learn To Code With Godot"
  echo "please use one of the following commands:"
  for i in ${!funcs[@]}; do
    command=${funcs[i]}
    echo "  - ${command//_/:}"
  done
  echo "you can get more info about commands by writing ./run <command> help"
  echo ""
}


######################################## CLEAN

clean_web(){
  if [ "$1" == "help" ]; then
    echo "Removes web build"
    exit 0
  fi
  rm -rf build/web
  echo "✓ Removed web files"
}


clean(){
  if [ "$1" == "help" ]; then
    echo "Removes all build directories"
    exit 0
  fi
  rm -rf build
  mkdir -p build
  touch build/.gdignore
  echo "✓ Removed all builds"
}

######################################## WEB DEV HELPERS

web_python_server(){
  if [ "$1" == "help" ]; then
    echo "Runs a python webserver in build/web"
    exit 0
  fi
  python -m http.server 8000 --directory build/web
}


web_watch(){
  if [ "$1" == "help" ]; then
    echo "Watches a directory for changes. Recompiles Godot when a \.gd file changes;"
    echo "Overwrites JS and CSS files in the static directory when they change"
    exit 0
  fi
  last_time_compiled=0
  throttle_compile=10
  last_time_copied=0
  throttle_copy=1
  dir=${1:-.}
  full_path=$(readlink -f $dir)
  echo "will watch $full_path"
  inotifywait --monitor --recursive --quiet --event modify,move,create,delete --format '%w%f' --includei "\.(js|css|html|gd)" "$dir" | while read FILE
  do
    changed_dir=$(dirname "$FILE")
    base_dir=$(echo "$changed_dir" | cut -d "/" -f2)
    if [ "$base_dir" != "build" ]; then
      now=$(date +%s)
      filename=$(basename "$FILE")
      ext=${FILE##*.}
      if [ "$base_dir" = "html_export" ]; then
        if (($now - $last_time_copied >= $throttle_copy)); then
          echo "will copy $FILE"
          cp "$FILE" "build/web/$filename"
        fi
        last_time_copied=$(date +%s)
      else
        echo "Changes detected in $FILE, will recompile"
        if (($now - $last_time_compiled >= $throttle_compile)); then
          export_any "HTML5" "build/web/index.html"
        fi 
        last_time_compiled=$(date +%s)
      fi
    fi
  done
}

web(){
  if [ "$1" == "help" ]; then
    echo "Exports the web build, starts a python webserver, and watches"
    echo "the directory for changes. Require Python 3 and inotifywait to"
    echo "be in your \$PATH"
    exit 0
  fi
  clean_web
  export_web
  web_python_server &
  web_watch
}

######################################## EXPORTS

export_any(){
  if [ "$1" == "help" ]; then
    echo "Exports a Godot build"
    echo "Usage:"
    echo "./run export:any <name> <output_path>"
    echo ""
    echo "for example: ./run export:any \"HTML5\" \"build/web/index.html\""
    echo ""
    echo "<name> needs to be a valid export specified in \`export_presets.cfg\`"
    exit 0
  fi
  export_name=$1
  output=$2
  dir=$(dirname "$output")
  mkdir -p "$dir"
  godot --quiet --no-window --export "$export_name" "$output"
  echo "✓ Exported \`$export_name\` build to \`$dir\`"
}


export_web(){
  if [ "$1" == "help" ]; then
    echo "Exports the Web build and copies over static files"
    exit 0
  fi
  export_any "HTML5" "build/web/index.html"
  cp -r html_export/static/* "build/web"
  echo "✓ Copied web files to $dir"
}


export_osx(){
  if [ "$1" == "help" ]; then
    echo "Exports the OSX build"
    exit 0
  fi
  export_any "Mac OSX" "build/osx/$APP_NAME.zip"
}


export_windows(){
  if [ "$1" == "help" ]; then
    echo "Exports the Windows build"
    exit 0
  fi
  export_any "Windows Desktop" "build/windows/$APP_NAME.exe"
}


export_linux(){
  if [ "$1" == "help" ]; then
    echo "Exports the Linux build"
    exit 0
  fi
  export_any "Linux/X11" "build/linux/$APP_NAME.x86_64"
}


export(){
  if [ "$1" == "help" ]; then
    echo "exports all builds"
    exit 0
  fi
  export_web
  export_windows
  export_osx
  export_linux
}

######################################## PUSHING TO ITCH

push(){
  tag=$1
  if [ "$1" == "help" ]; then
    echo "Usage:"
    echo "push <build> [...<tags>]"
    echo "you can use \`all\` instead of a build name"
    echo "the build needs to exist in the build/ directory"
    echo ""
    echo "example:"
    echo "run push linux staging"
    echo "run push all"
    exit 0
  fi
  if [ -z "$tag" ]; then
    echo "You need to specify a build to push, or \`all\`"
    echo "available builds:"
    for d in build/*/ ; do
      build_name=$(basename $d)
      echo "  - $build_name"
    done
    echo "  - all"
    exit 1
  fi
  dir="build/$tag"
  error=0
  if [ ! -d "$dir" ] && [ "$tag" != "all" ]; then
    echo "\`$dir\` does not seem to exist. Did you type the name correctly?"
    error=1
  fi
  if [ -z "$BUTLER_API_KEY" ]; then
    echo "\$BUTLER_API_KEY is a mandatory variable to push to itch"
    error=1
  fi
  if [ -z "$ITCHIO_USERNAME" ]; then
    echo "\$ITCHIO_USERNAME is a mandatory variable to push to itch"
    error=1
  fi
  if [ -z "$ITCHIO_GAME" ]; then
    echo "\$ITCHIO_GAME is a mandatory variable to push to itch"
    error=1
  fi
  if ! command -v butler &> /dev/null; then
    echo "\`butler\` is not installed or not available on \$PATH"
    error=1
  fi
  if [ "$error" -eq "1" ]; then
    exit 1
  fi
  if [ "$tag" == "all" ]; then
    shift
    old="$IFS"
    IFS='-'
    all_tags="$*"
    IFS=$old
    for d in build/*/ ; do
      build_name=$(basename $d)
      if [ "$all_tags" != "" ]; then
        tag=$(echo "$build_name" "$all_tags" | sed "s/ /-/g")
      else
        tag="$build_name"
      fi
      echo "butler push $d $ITCHIO_USERNAME/$ITCHIO_GAME:$tag"
      butler push "$d" "$ITCHIO_USERNAME/$ITCHIO_GAME":"$tag"
    done
  else
    old="$IFS"
    IFS='-'
    all_tags="$*"
    IFS=$old
    echo "butler push $dir $ITCHIO_USERNAME/$ITCHIO_GAME:$all_tags"
    butler push "$dir" "$ITCHIO_USERNAME/$ITCHIO_GAME":"$all_tags"
  fi
}

######################################## CI/CD

prepare_ci_copytemplates(){
  if [ "$1" == "help" ]; then
    echo "This prepares the CI by copying the template from the docker"
    echo "You should not run this on your local computer"
    exit 0
  fi
  if [ -z "$GODOT_VERSION" ]; then
    echo "\$GODOT_VERSION environment variable is not set"
    exit 1
  fi
  mkdir -v -p ~/.local/share/godot/templates
  mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
}

prepare_ci_software(){
  if [ "$1" == "help" ]; then
    echo "This prepares the CI by installing the necessary software"
    echo "You should not run this on your local computer"
    exit 0
  fi
  apt-get update
  apt-get install -y --no-install-recommends sed
}

prepare_ci(){
  if [ "$1" == "help" ]; then
    echo "This prepares the CI"
    echo "You should not run this on your local computer"
    exit 0
  fi
  prepare_ci_copytemplates
  prepare_ci_software
}

######################################## BOOTSTRAP

funcs=(`declare -F | awk '{print $NF}' | sort | egrep -v "^_"`)
command=${1//:/_}

if [[ " ${funcs[*]} " =~ " ${command} " ]]; then
  shift
  $command $@
  exit 0
else
  if [[ $command ]]; then
    echo ""
    echo "\`${command}\` isn't a recognized command"
    echo ""
  fi
  help
  exit 1
fi